#!/usr/bin/python3
##
## EPITECH PROJECT, 2023
## 109titration
## File description:
## pH-jump
##

import parse
import csv
import sys
from collections import defaultdict
from os import path

def print_usage():
    print("USAGE")
    print("\t./109titration file")
    print("DESCRIPTION")
    print("\tfile\tacsv file containing \"vol;ph\" lines")

def print_vol_ph(vol:list, ph:list):
    for i in range(len(vol)):
        print(f"{vol[i]:.1f} ml -> {ph[i]:.2f}")
    print()

def estimation_of_derivative(data, a, b, c):
    xba = data["vol"][b] - data["vol"][a]
    xcb = data["vol"][c] - data["vol"][b]
    yba = data["pH"][b] - data["pH"][a]
    ycb = data["pH"][c] - data["pH"][b]
    sum_diff = xba + xcb
    weight_a = xcb / sum_diff
    weight_b = xba / sum_diff

    return ((weight_a * (yba / xba)) + (weight_b * (ycb / xcb)))

def equivalence_point(dev):
    for i in range(1, len(dev["pH"]) - 1):
        if dev["pH"][i - 1] < dev["pH"][i] and dev["pH"][i] > dev["pH"][i + 1]:
            return i

def derivative(data):
    dev = {
        "vol": [],
        "pH": [],
    }
    for i in range(1, len(data["pH"]) - 1):
        dev["vol"].append(data["vol"][i])
        dev["pH"].append(estimation_of_derivative(data, i - 1, i, i + 1))
    return dev

def maths(data):
    print("Derivative:")
    dev = derivative(data)
    print_vol_ph(dev["vol"], dev["pH"])
    point_index = equivalence_point(dev)
    print(f"Equivalence point at {dev['vol'][point_index]:.1f} ml", end="\n\n")
    print("Second derivative:")
    dev = derivative(dev)
    print_vol_ph(dev["vol"], dev["pH"])
    print("Second derivative estimation:")

def main():
    if len(sys.argv) == 2:
        if sys.argv[1] == "-h":
            print_usage()
        elif path.exists(sys.argv[1]) and path.getsize(sys.argv[1]) != 0:
            maths(parse.parse_information())
        else:
            raise Exception("Invalid argument/file given.")
    else:
        raise Exception("Invalid amount of arguments.")

if __name__ == "__main__":
    try:
        main()
    except Exception as e:
        print(e, file=sys.stderr)
        exit(84)
